package ${packagebase}.web;


import ${packagebase}.${resourcename?lower_case}.business.${resourcename}Service;
import ${packagebase}.${resourcename?lower_case}.model.api.${resourcename};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.validation.annotation.Validated;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;R
import org.springframework.cloud.context.config.annotation.RefreshScope;
import com.everis.ecnf.core.model.HttpHeadersRequest;
import reactor.core.publisher.Flux;
import com.everis.ecnf.annotations.HttpHeadersMapping;
import reactor.core.publisher.Mono;
import org.springframework.web.bind.annotation.PathVariable;



@RefreshScope
@RestController
@RequestMapping("${r"${application.ecnf.api.path}"}/${resourcename}")
@Api(tags = "${resourcename}", description = "${resourcename}")
@Slf4j
public class ${resourcename}Controller {

    @Autowired
    private ${resourcename}Service ${resourcename?lower_case}Service;


    @GetMapping(value = "", produces = {MediaType.APPLICATION_STREAM_JSON_VALUE, MediaType.APPLICATION_JSON_VALUE})
    @ApiOperation(value = "Consulta ${resourcename?lower_case}", response = ${resourcename}.class, httpMethod = "GET", notes = "classpath:swagger/notes/${servicename}..md")
    @ApiResponses({ @ApiResponse(code = 200, message = "Se ejecuto satisfactoriamente."),
                    @ApiResponse(code = 400, message = "El cliente envio datos incorrectos."),
                    @ApiResponse(code = 500, message = "Error inesperado.")})
    public Flux<${resourcename}> get${resourcename}(@HttpHeadersMapping @Validated HttpHeadersRequest header) {
        return ${resourcename?lower_case}Service.get${resourcename}();
    }

    @GetMapping(value = "{id}", produces = {MediaType.APPLICATION_STREAM_JSON_VALUE, MediaType.APPLICATION_JSON_VALUE})
    @ApiOperation(value = "Consulta ${resourcename?lower_case}", response = ${resourcename}.class, httpMethod = "GET", notes = "classpath:swagger/notes/${servicename}..md")
    @ApiResponses({ @ApiResponse(code = 200, message = "Se ejecuto satisfactoriamente."),
    @ApiResponse(code = 400, message = "El cliente envio datos incorrectos."),
    @ApiResponse(code = 500, message = "Error inesperado.")})
    public Mono<${resourcename}> get${resourcename}(@HttpHeadersMapping @Validated HttpHeadersRequest header,  @PathVariable("id") Long value) {
        return ${resourcename?lower_case}Service.get${resourcename}(value);
    }


}